{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initialdata","ok","members","id","real_name","tz","activity_periods","start_time","end_time","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","Viewmodal","event","data","state","DispalyData","find","item","target","setState","NewData","isModalOpen","viewrealname","viewtz","i","length","startTime","s_time","split","pop","lastIndex_start_time","lastIndexOf","newStartTime","substring","moment","format","endTime","e_time","lastIndex_end_time","newEndTime","obj","StartTime","EndTime","Subject","push","modalClosehandle","timezone","Timezone","bind","assertThisInitialized","_this2","Data","undefined","List","map","react_default","a","createElement","className","key","onClick","Container","Row","Modal","size","show","onHide","Header","closeButton","Title","Body","Form","Col","sm","Group","controlId","Label","Control","type","onChange","UpdateTitlechangehandler","name","value","readOnly","schedule_component","height","selectedDate","Date","TimeMode","eventSettings","dataSource","ej2_react_base","services","Day","Week","WorkWeek","Month","editable","Component","Boolean","window","location","hostname","match","jsx","src_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62a9416a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {Col,Row,Container,Modal,Form} from \"react-bootstrap\";\nimport moment from \"moment\"\nimport { ScheduleComponent, Day, Week, WorkWeek, Month, Agenda,Timezone, Inject } from '@syncfusion/ej2-react-schedule';\n\nconst initialdata={\n    \"ok\": true,\n    \"members\": [{\n            \"id\": \"W012A3CDE\",\n            \"real_name\": \"Egon Spengler\",\n            \"tz\": \"America/Los_Angeles\",\n            \"activity_periods\": [{\n                    \"start_time\": \"Feb 1 2020  1:33PM\",\n                    \"end_time\": \"Feb 1 2020 1:54PM\"\n                },\n                {\n                    \"start_time\": \"Mar 1 2020  11:11AM\",\n                    \"end_time\": \"Mar 1 2020 2:00PM\"\n                },\n                {\n                    \"start_time\": \"Mar 16 2020  5:33PM\",\n                    \"end_time\": \"Mar 16 2020 8:02PM\"\n                }\n            ]\n        },\n        {\n            \"id\": \"W07QCRPA4\",\n            \"real_name\": \"Glinda Southgood\",\n            \"tz\": \"Asia/Kolkata\",\n            \"activity_periods\": [{\n                    \"start_time\": \"Feb 1 2020  1:33PM\",\n                    \"end_time\": \"Feb 1 2020 1:54PM\"\n                },\n                {\n                    \"start_time\": \"Mar 2 2020  11:11AM\",\n                    \"end_time\": \"Mar 2 2020 2:00PM\"\n                },\n                {\n                    \"start_time\": \"Mar 21 2020  5:33PM\",\n                    \"end_time\": \"Mar 21 2020 8:02PM\"\n                }\n            ]\n        }\n    ]\n}  \n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            DispalyData:null,\n            isModalOpen: false,\n            timezone :new Timezone(),\n            activity_periods:\"\"\n        }\n        this.Viewmodal = this.Viewmodal.bind(this);\n        this.modalClosehandle=this.modalClosehandle.bind(this);\n    }\n   \n    \n    componentDidMount() {\n        this.setState({\n            DispalyData:initialdata\n        }) \n     }\n\n     Viewmodal=(event)=>{\n           \n           const data = this.state.DispalyData.members.find((item) => item.id === event.target.id);\n           this.setState({\n            activity_periods:NewData,\n            isModalOpen:!this.state.isModalOpen,\n            viewrealname:data.real_name,\n            viewtz:data.tz,\n          })\n           let activity_periods=data.activity_periods;\n           var i;\n           let NewData=[];\n           for(i=0;i<=activity_periods.length-1;i++){\n              let startTime=activity_periods[i].start_time;\n              let s_time=startTime.split(\" \").pop();\n              let lastIndex_start_time = startTime.lastIndexOf(\" \");\n              startTime = startTime.substring(0, lastIndex_start_time);\n              let StartTime = moment(s_time, [\"h:mm A\"]).format(\"HH:mm:ss\");\n              let newStartTime=startTime+\"\"+StartTime;\n              let endTime=activity_periods[i].end_time;\n              let e_time=endTime.split(\" \").pop();\n              let lastIndex_end_time = endTime.lastIndexOf(\" \");\n               endTime = endTime.substring(0, lastIndex_end_time);\n              let EndTime = moment(e_time, [\"h:mm A\"]).format(\"HH:mm:ss\");\n              let newEndTime=endTime+\" \"+EndTime;\n              let obj={};\n              obj.StartTime=newStartTime;\n              obj.EndTime=newEndTime;\n              obj.Subject=\"Activity Periods\";\n              NewData.push(obj);\n           }\n           \n           this.setState({\n            activity_periods:NewData,\n          })\n           \n    }\n    \n    modalClosehandle=(event)=>{\n        this.setState({\n            isModalOpen:!this.state.isModalOpen\n        })\n    }\n\n    render() {  \n          var Data = this.state.DispalyData;\n\n          if( Data!==null && Data!==undefined){\n                    var List=Data.members.map((item)=>\n                        <div className=\"Maindiv\" key={item.id}>\n                            <div className=\"\" id={item.id}  onClick={this.Viewmodal}>\n                                 {item.real_name}\n                            </div>\n                            <div className=\"\" >\n                                 {item.tz}\n                            </div>\n                        </div>\n                   )\n            }\n        return (\n            <div>\n              <Container>\n                    <Row>\n                       {List}\n                        <Modal size=\"lg\" show={this.state.isModalOpen} onHide={this.modalClosehandle}>\n                            <Modal.Header closeButton >\n                                <Modal.Title>View Task</Modal.Title>\n                            </Modal.Header>\n                            <Modal.Body>\n                                <Form>\n                                <Row>\n                                    <Col sm={12}>\n                                        <Form.Group controlId=\"Summery\">\n                                            <Form.Label>Real Name</Form.Label>\n                                            <Form.Control\n                                            type=\"text\"\n                                            onChange={this.UpdateTitlechangehandler}\n                                            name=\"Title\"\n                                            value={this.state.viewrealname}\n                                            readOnly\n                                            />\n                                        </Form.Group>\n                                    </Col>\n                                    <Col sm={12}>\n                                        <Form.Group controlId=\"Summery\">\n                                            <Form.Label>Tz</Form.Label>\n                                            <Form.Control\n                                            type=\"text\"\n                                            name=\"Title\"\n                                            value={this.state.viewtz}\n                                            readOnly\n                                            />\n                                        </Form.Group>\n                                    </Col>\n\n                                    <Col sm={12}>\n                                    <Form.Group controlId=\"Summery\">\n                                            <Form.Label>Activity Periods</Form.Label>\n                                            <ScheduleComponent height='550px' selectedDate={new Date(\"Feb 1 2020\")} TimeMode=\"TwelveHours\" eventSettings={{ dataSource: this.state.activity_periods }}>\n                                                <Inject services={[Day,Week, WorkWeek, Month]} timezone=' UTC+05:30' editable=\"false\"/>\n                                            </ScheduleComponent>\n                                        </Form.Group>\n                                     </Col>\n                                  </Row>\n                                </Form>\n                            </Modal.Body>\n                     </Modal>\n                    </Row>\n               </Container>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst jsx= (\n       <App />          \n)\nReactDOM.render(jsx, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}